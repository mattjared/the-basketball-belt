{"version":3,"sources":["Components/Header/Header.js","Components/Next/Next.js","Components/History/History.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Header","backgroundColorCSS","backgroundColor","getMainColor","this","props","theBelt","hex","react_default","a","createElement","className","style","getFullName","Component","Next","History","console","log","gameTeams","gameDate","map","teams","key","name","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","theChallenger","games","_this2","axios","get","then","res","data","setState","Components_Header_Header","Components_Next_Next","i","Date","badges","due","labels","Components_History_History","moment","format","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAsBeA,2LAhBX,IAEMC,EAAqB,CACzBC,gBAHeC,YAAaC,KAAKC,MAAMC,SACZC,KAI7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,MAAOX,GAC3BO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAd,yBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACVE,YAAYT,KAAKC,MAAMC,kBAXhBQ,cCUNC,2LATX,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZP,KAAKC,MAAMC,QACZE,EAAAC,EAAAC,cAAA,yDALWI,cCiBJE,2LAbX,OADAC,QAAQC,IAAId,KAAKC,MAAMc,WAErBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SAAIN,KAAKC,MAAMe,UACdhB,KAAKC,MAAMc,UAAUE,IAAI,SAACC,GACzB,OACEd,EAAAC,EAAAC,cAAA,KAAGa,IAAKD,EAAME,MAAQX,YAAYS,EAAME,iBAR9BV,gDCwCPW,cApCb,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA3B,KAAMC,KACD2B,MAAQ,CACX1B,QAAS,MACT2B,cAAe,MACfC,MAAO,IALQR,mFAQC,IAAAS,EAAA/B,KAClBgC,IAAMC,IAAI,iEACTC,KAAK,SAAAC,GACJ,IAAML,EAAQK,EAAIC,KAClBL,EAAKM,SAAS,CAAEP,6CAIlB,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,CAAQpC,QAASF,KAAK4B,MAAM1B,UAC5BE,EAAAC,EAAAC,cAACiC,EAAD,CAAMrC,QAASF,KAAK4B,MAAM1B,UACzBF,KAAK4B,MAAME,MAAMb,IAAI,SAACa,EAAOU,GAC5B,IAAMxB,EAAW,IAAIyB,KAAKX,EAAMY,OAAOC,KACjCzB,EAAQY,EAAMc,OACpB,OACExC,EAAAC,EAAAC,cAACuC,EAAD,CACE1B,IAAKqB,EACLxB,SAAU8B,IAAO9B,GAAU+B,OAAO,MAClChC,UAAWG,cA5BPR,aCKEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.2fcb888b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { getMainColor, getFullName } from 'nba-color';\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n    const colorWay = getMainColor(this.props.theBelt);\n    const hexColorWay = colorWay.hex;\n    const backgroundColorCSS = {\n      backgroundColor: hexColorWay, \n    }\n    return (\n      <div className=\"Header\" style={backgroundColorCSS}>\n          <h4 className=\"Header-preheadline\">- who has the belt? -</h4>\n          <h1 className=\"Header-headline\">\n            { getFullName(this.props.theBelt) }\n          </h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Next.css';\n\nclass Next extends Component {\n  render() {\n    return (\n      <div className=\"Next\">\n        {this.props.theBelt}\n        <h2>Their title match is against  on . </h2>        \n      </div>\n    );\n  }\n}\n\nexport default Next;\n","import React, { Component } from 'react';\nimport { getFullName } from 'nba-color';\nimport './History.css';\n\nclass History extends Component {\n  render() {\n    console.log(this.props.gameTeams);\n    return (\n      <div className=\"History\">\n        <p>{this.props.gameDate}</p>\n        {this.props.gameTeams.map((teams) => {\n          return (\n            <p key={teams.name}>{ getFullName(teams.name) }</p>  \n          )\n        })}\n      </div>\n    );\n  }\n}\n\nexport default History;\n","import React, { Component } from 'react';\nimport Header from '../Header/Header';\nimport Next from '../Next/Next';\nimport History from '../History/History'\nimport axios from 'axios';\nimport moment from 'moment';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      theBelt: 'MEM',\n      theChallenger: 'GSW',\n      games: []\n    };\n  }\n  componentDidMount() {\n    axios.get('https://api.trello.com/1/lists/5c3a5f3066596b37b3f656b6/cards')\n    .then(res => {\n      const games = res.data;\n      this.setState({ games })\n    })\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Header theBelt={this.state.theBelt} />\n        <Next theBelt={this.state.theBelt} />\n        {this.state.games.map((games, i) => {\n          const gameDate = new Date(games.badges.due);\n          const teams = games.labels;\n          return (\n            <History\n              key={i}\n              gameDate={moment(gameDate).format('LL')}\n              gameTeams={teams}\n            />\n          ) \n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}